esphome:
  name: smart-flow
  friendly_name: Smart Flow

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "FfzxqPr2lo64raFrqAc6WxPVyvhdutBBPI/fjipWT3s="

ota:
  - platform: esphome
    password: "0af5ef23670371b244e4a8eacd3a9f4e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Smart-Flow Fallback Hotspot"
    password: "5AMSDoiAlwK7"

captive_portal:

# AC Dimmer output
output:
  - platform: ac_dimmer
    id: fan_dimmer_output
    gate_pin: GPIO4
    zero_cross_pin:
      number: GPIO2
      mode: INPUT_PULLUP
      inverted: yes
    min_power: 0.25
    max_power: 0.70

# Servo and control outputs
  - platform: gpio
    pin: GPIO22
    id: servo_switch_signal

switch:
  - platform: output
    id: servo_motor_switch
    name: "Servo Motor Switch"
    output: servo_switch_signal

# Fan control
fan:
  - platform: speed
    id: controllable_fan
    output: fan_dimmer_output
    name: "Smart Flow Fan"

# Font for display
font:
  - file: "gfonts://Roboto"
    id: custom_font
    size: 16

# OLED display (I2C)
i2c:
  sda: GPIO19
  scl: GPIO18
  scan: true
  frequency: 100kHz

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      it.printf(0, 0, id(custom_font), TextAlign::TOP_LEFT, "Smart Flow Fan");

      if (id(controllable_fan).state) {
        it.printf(0, 20, id(custom_font), TextAlign::TOP_LEFT, "Motor: ON : %d%%", id(controllable_fan).speed);
      } else {
        it.printf(0, 20, id(custom_font), TextAlign::TOP_LEFT, "Motor: OFF");
      }

      if (id(servo_motor_switch).state) {
        it.printf(0, 40, id(custom_font), TextAlign::TOP_LEFT, "Rotation: ON");
      } else {
        it.printf(0, 40, id(custom_font), TextAlign::TOP_LEFT, "Rotation: OFF");
      }

# Buttons
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO25
      inverted: true
      mode: INPUT_PULLUP
    name: "Fan Speed Up Button"
    id: fan_speed_up_button
    on_press:
      then:
        - lambda: |-
            if (!id(controllable_fan).state) {
              ESP_LOGD("button", "Fan Speed Up: Fan is OFF. Turning ON with speed 10.");
              auto call = id(controllable_fan).turn_on();
              call.set_speed(10);
              call.perform();
            } else {
              int current_speed = id(controllable_fan).speed;
              int new_speed = current_speed + 10;
              if (new_speed > 100) new_speed = 100;
              auto call = id(controllable_fan).make_call();
              call.set_speed(new_speed);
              call.perform();
            }

  - platform: gpio
    pin:
      number: GPIO26
      inverted: true
      mode: INPUT_PULLUP
    name: "Fan Speed Down Button"
    id: fan_speed_down_button
    on_press:
      then:
        - lambda: |-
            if (id(controllable_fan).state) {
              int current_speed = id(controllable_fan).speed;
              int new_speed = current_speed - 10;
              if (new_speed < 0) new_speed = 0;
              auto call = id(controllable_fan).make_call();
              call.set_speed(new_speed);
              call.perform();
            }

  - platform: gpio
    pin:
      number: GPIO27
      inverted: true
      mode: INPUT_PULLUP
    name: "Fan Toggle Button"
    id: fan_toggle_button
    on_press:
      then:
        - fan.toggle: controllable_fan

  - platform: gpio
    pin:
      number: GPIO23
      inverted: true
      mode: INPUT_PULLUP
    name: "Servo Toggle Button"
    id: servo_toggle_button
    on_press:
      then:
        - switch.toggle: servo_motor_switch
    
